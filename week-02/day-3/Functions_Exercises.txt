// Exercise 1

#include <stdio.h>

/* Write a void function which can print the following text on the screen:
------------
-- TOTORO --
------------
- GREENFOX -
------------
Name this function as "TotoroLogoPrinter" and call it from the main function!*/
void TotoroLogoPrinter();

int main(){
    TotoroLogoPrinter();
    return 0;
}


void TotoroLogoPrinter(){
    printf("------------\n");
    printf("-- TOTORO --\n");
    printf("------------\n");
    printf("- GREENFOX -\n");
    printf("------------\n");
}



// Exercise 2

#include <stdio.h>

/* Write a void function which has two float parameters. The function can do the
totoro operation on those parameters and it also prints out the result of the operation
on the screen.
The totoro operation does the following on two variables (let's say we have "a"
 and "b")
result = a*b+(a+b)+a*a*a+b*b*b+3.14159265358979
*/
void totoroOperator(float a, float b);

int main(){
    //totoroOperator(1, 2);

    return 0;
}

void totoroOperator(float a, float b){
    float c= a*b+(a+b)+a*a*a+b*b*b+3.14159265358979;
    printf("%f", c);
}



// Exercise 3

#include <stdio.h>

/* Write a non void function which returns the value of PI, so the following number:
3.14159
Try it out in the main function by printing out the result of the pi generator function!
*/

float piGenerator();

float pi= 3.14159;

int main(){
    printf("%f", piGenerator());

    return 0;
}

float piGenerator(){
    return pi;
}



// Execise 4

#include <stdio.h>

/* Write a non void function which has a paramters (let's say for example x).
The funtion than returns the "xth" fibonaci number.
What the hack is a fibonacci number? Search it on wikipedia!
*/
int fibonacci(int x);

int main(){
    int i;
    for(i=0; i<20; i++){
        printf("%d\n", fibonacci(i));
    }

    return 0;
}

int fibonacci(int x){
    if(x==0){
        return 0;
    }
    if(x==1){
        return 1;
    }
    else{
        return fibonacci(x-1)+ fibonacci(x-2);
    }
}
